##########################################################
# Sample .aider.conf.yml
# This file lists *all* the valid configuration entries.
# Place in your home dir, or at the root of your git repo.
##########################################################

# Note: You can only put OpenAI and Anthropic API keys in the yaml
# config file. Keys for all APIs can be stored in a .env file
# https://aider.chat/docs/config/dotenv.html

##########
# options:

## show this help message and exit
#help: xxx

#######
# Main:

## Specify the OpenAI API key
openai-api-key: ${OPENAI_API_KEY}

## Specify the Anthropic API key
anthropic-api-key: ${ANTHROPIC_API_KEY}

## Specify the model to use for the main chat
model: ${MODEL}

## Use claude-3-opus-20240229 model for the main chat
opus: ${OPUS}

## Use claude-3-5-sonnet-20241022 model for the main chat
sonnet: ${SONNET}

## Use gpt-4-0613 model for the main chat
4: ${GPT4}

## Use gpt-4o-2024-08-06 model for the main chat
4o: ${GPT4O}

## Use gpt-4o-mini model for the main chat
mini: ${MINI}

## Use gpt-4-1106-preview model for the main chat
4-turbo: ${GPT4_TURBO}

## Use gpt-3.5-turbo model for the main chat
35turbo: ${GPT35_TURBO}

## Use deepseek/deepseek-coder model for the main chat
deepseek: ${DEEPSEEK}

## Use o1-mini model for the main chat
o1-mini: ${O1_MINI}

## Use o1-preview model for the main chat
o1-preview: ${O1_PREVIEW}

#################
# Model Settings:

## List known models which match the (partial) MODEL name
list-models: ${LIST_MODELS}

## Specify the api base url
openai-api-base: ${OPENAI_API_BASE}

## Specify the api_type
openai-api-type: ${OPENAI_API_TYPE}

## Specify the api_version
openai-api-version: ${OPENAI_API_VERSION}

## Specify the deployment_id
openai-api-deployment-id: ${OPENAI_API_DEPLOYMENT_ID}

## Specify the OpenAI organization ID
openai-organization-id: ${OPENAI_ORGANIZATION_ID}

## Specify a file with aider model settings for unknown models
model-settings-file: ${MODEL_SETTINGS_FILE}

## Specify a file with context window and costs for unknown models
model-metadata-file: ${MODEL_METADATA_FILE}

## Verify the SSL cert when connecting to models (default: True)
verify-ssl: ${VERIFY_SSL}

## Specify what edit format the LLM should use (default depends on model)
edit-format: ${EDIT_FORMAT}

## Use architect edit format for the main chat
architect: ${ARCHITECT}

## Specify the model to use for commit messages and chat history summarization (default depends on --model)
weak-model: ${WEAK_MODEL}

## Specify the model to use for editor tasks (default depends on --model)
editor-model: ${EDITOR_MODEL}

## Specify the edit format for the editor model (default: depends on editor model)
editor-edit-format: ${EDITOR_EDIT_FORMAT}

## Only work with models that have meta-data available (default: True)
show-model-warnings: ${SHOW_MODEL_WARNINGS}

## Soft limit on tokens for chat history, after which summarization begins. If unspecified, defaults to the model's max_chat_history_tokens.
max-chat-history-tokens: ${MAX_CHAT_HISTORY_TOKENS}

## Specify the .env file to load (default: .env in git root)
env-file: ${ENV_FILE}

#################
# Cache Settings:

## Enable caching of prompts (default: False)
cache-prompts: ${CACHE_PROMPTS}

## Number of times to ping at 5min intervals to keep prompt cache warm (default: 0)
cache-keepalive-pings: ${CACHE_KEEPALIVE_PINGS}

###################
# Repomap Settings:

## Suggested number of tokens to use for repo map, use 0 to disable (default: 1024)
map-tokens: ${MAP_TOKENS}

## Control how often the repo map is refreshed. Options: auto, always, files, manual (default: auto)
map-refresh: ${MAP_REFRESH}

## Multiplier for map tokens when no files are specified (default: 2)
map-multiplier-no-files: ${MAP_MULTIPLIER_NO_FILES}

################
# History Files:

## Specify the chat input history file (default: .aider.input.history)
input-history-file: ${INPUT_HISTORY_FILE}

## Specify the chat history file (default: .aider.chat.history.md)
chat-history-file: ${CHAT_HISTORY_FILE}

## Restore the previous chat history messages (default: False)
restore-chat-history: ${RESTORE_CHAT_HISTORY}

## Log the conversation with the LLM to this file (for example, .aider.llm.history)
llm-history-file: ${LLM_HISTORY_FILE}

##################
# Output Settings:

## Use colors suitable for a dark terminal background (default: False)
dark-mode: ${DARK_MODE}

## Use colors suitable for a light terminal background (default: False)
light-mode: ${LIGHT_MODE}

## Enable/disable pretty, colorized output (default: True)
pretty: ${PRETTY}

## Enable/disable streaming responses (default: True)
stream: ${STREAM}

## Set the color for user input (default: #00cc00)
user-input-color: ${USER_INPUT_COLOR}

## Set the color for tool output (default: None)
tool-output-color: ${TOOL_OUTPUT_COLOR}

## Set the color for tool error messages (default: #FF2222)
tool-error-color: ${TOOL_ERROR_COLOR}

## Set the color for tool warning messages (default: #FFA500)
tool-warning-color: ${TOOL_WARNING_COLOR}

## Set the color for assistant output (default: #0088ff)
assistant-output-color: ${ASSISTANT_OUTPUT_COLOR}

## Set the color for the completion menu (default: terminal's default text color)
completion-menu-color: ${COMPLETION_MENU_COLOR}

## Set the background color for the completion menu (default: terminal's default background color)
completion-menu-bg-color: ${COMPLETION_MENU_BG_COLOR}

## Set the color for the current item in the completion menu (default: terminal's default background color)
completion-menu-current-color: ${COMPLETION_MENU_CURRENT_COLOR}

## Set the background color for the current item in the completion menu (default: terminal's default text color)
completion-menu-current-bg-color: ${COMPLETION_MENU_CURRENT_BG_COLOR}

## Set the markdown code theme (default: default, other options include monokai, solarized-dark, solarized-light)
code-theme: ${CODE_THEME}

## Show diffs when committing changes (default: False)
show-diffs: ${SHOW_DIFFS}

###############
# Git Settings:

## Enable/disable looking for a git repo (default: True)
git: ${GIT}

## Enable/disable adding .aider* to .gitignore (default: True)
gitignore: ${GITIGNORE}

## Specify the aider ignore file (default: .aiderignore in git root)
aiderignore: ${AIDERIGNORE}

## Only consider files in the current subtree of the git repository
subtree-only: ${SUBTREE_ONLY}

## Enable/disable auto commit of LLM changes (default: True)
auto-commits: ${AUTO_COMMITS}

## Enable/disable commits when repo is found dirty (default: True)
dirty-commits: ${DIRTY_COMMITS}

## Attribute aider code changes in the git author name (default: True)
attribute-author: ${ATTRIBUTE_AUTHOR}

## Attribute aider commits in the git committer name (default: True)
attribute-committer: ${ATTRIBUTE_COMMITTER}

## Prefix commit messages with 'aider: ' if aider authored the changes (default: False)
attribute-commit-message-author: ${ATTRIBUTE_COMMIT_MESSAGE_AUTHOR}

## Prefix all commit messages with 'aider: ' (default: False)
attribute-commit-message-committer: ${ATTRIBUTE_COMMIT_MESSAGE_COMMITTER}

## Commit all pending changes with a suitable commit message, then exit
commit: ${COMMIT}

## Specify a custom prompt for generating commit messages
commit-prompt: ${COMMIT_PROMPT}

## Perform a dry run without modifying files (default: False)
dry-run: ${DRY_RUN}

## Skip the sanity check for the git repository (default: False)
skip-sanity-check-repo: ${SKIP_SANITY_CHECK_REPO}

########################
# Fixing and committing:

## Lint and fix provided files, or dirty files if none provided
lint: ${LINT}

## Specify lint commands to run for different languages, eg: "python: flake8 --select=..." (can be used multiple times)
lint-cmd: ${LINT_CMD}
## Specify multiple values like this:
lint-cmd:
  - ${LINT_CMD_1}
  - ${LINT_CMD_2}
  - ${LINT_CMD_3}

## Enable/disable automatic linting after changes (default: True)
auto-lint: ${AUTO_LINT}

## Specify command to run tests
test-cmd: ${TEST_CMD}

## Enable/disable automatic testing after changes (default: False)
auto-test: ${AUTO_TEST}

## Run tests and fix problems found
test: ${TEST}

#################
# Other Settings:

## specify a file to edit (can be used multiple times)
file: ${FILE}
## Specify multiple values like this:
file:
  - ${FILE_1}
  - ${FILE_2}
  - ${FILE_3}

## specify a read-only file (can be used multiple times)
read: ${READ}
## Specify multiple values like this:
read:
  - ${READ_1}
  - ${READ_2}
  - ${READ_3}

## Use VI editing mode in the terminal (default: False)
vim: ${VIM}

## Specify the language to use in the chat (default: None, uses system settings)
chat-language: ${CHAT_LANGUAGE}

## Show the version number and exit
version: ${VERSION}

## Check for updates and return status in the exit code
just-check-update: ${JUST_CHECK_UPDATE}

## Check for new aider versions on launch
check-update: ${CHECK_UPDATE}

## Install the latest version from the main branch
install-main-branch: ${INSTALL_MAIN_BRANCH}

## Upgrade aider to the latest version from PyPI
upgrade: ${UPGRADE}

## Apply the changes from the given file instead of running the chat (debug)
apply: ${APPLY}

## Always say yes to every confirmation
yes-always: ${YES_ALWAYS}

## Enable verbose output
verbose: ${VERBOSE}

## Print the repo map and exit (debug)
show-repo-map: ${SHOW_REPO_MAP}

## Print the system prompts and exit (debug)
show-prompts: ${SHOW_PROMPTS}

## Do all startup activities then exit before accepting user input (debug)
exit: ${EXIT}

## Specify a single message to send the LLM, process reply then exit (disables chat mode)
message: ${MESSAGE}

## Specify a file containing the message to send the LLM, process reply, then exit (disables chat mode)
message-file: ${MESSAGE_FILE}

## Specify the encoding for input and output (default: utf-8)
encoding: ${ENCODING}

## Specify the config file (default: search for .aider.conf.yml in git root, cwd or home directory)
config: ${CONFIG}

## Run aider in your browser
gui: ${GUI}

## Enable/disable suggesting shell commands (default: True)
suggest-shell-commands: ${SUGGEST_SHELL_COMMANDS}

## Enable/disable fancy input with history and completion (default: True)
fancy-input: ${FANCY_INPUT}

#################
# Voice Settings:

## Audio format for voice recording (default: wav). webm and mp3 require ffmpeg
voice-format: ${VOICE_FORMAT}

## Specify the language for voice using ISO 639-1 code (default: auto)
voice-language: ${VOICE_LANGUAGE}

